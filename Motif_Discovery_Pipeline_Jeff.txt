# Plan: Search in Paramecium clades for gene families. Take those gene families, extract and group 5' upstream and 3' downstream region, then feed this to MEME. 
# Return motifs, look for  sequences for functional analysis
# This will reveal motifs that were conserved between species in closely related clades. This does not group genes by functional similarities.
# Basic Protocol:
	# 1st: Set up your gff's. Paramecium genome annotations are in .gff, but we want a table with just "ScaffoldID,start,end,strand+-,GeneID"
	# To do this, we will use bash to cut .gff and make a new file with these tables ONLY FOR GENES. We check to see if the line contains the word gene, then extract the line, cut columns we want, modify to remove additional wording
	
# Bash
# Path to gff's : 	# CARBONATE																													/
ssh -o ServerAliveInterval=60 tlicknac@carbonate.uits.iu.edu
cd N/dc2/projects/paramecium/BigProject/FILES 
cd ../../../dc2/projects/paramecium/BigProject/FILES 

																																					# From here, we can access data for pbi, ptet, psex
cat ___.gff | grep "	gene	" | cut -f 1,4,5,6,9 | sed -i 's/ID=//' > ___genes.gff  #display original gff, find rows with gene, cut the columns we want, remove "ID=" from
 
# Now we have a tabulated .gff that we can parse ... repeat for all species!  ..... end up with 15 tables of gene information for each species



	

#Protocol in Bash:
#Prep of .gff

#MY VERSION.... WORKS BUT IS INEFFICIENT AND CREATES BAD FILE NAMES
#!/bin/bash
#Iterate through all Paramecium .gff's to create new table with just genes
#First loop to cut columns
parameciumgff=*.gff

for species in $parameciumgff
do
 	cat $species | grep "   gene    " | cut -f 1,4,5,6,9 > {$species}_table
done

parameciumtable=*_table
#Second loop to remove ID=
for sp_table in $parameciumtable
do
  	sed -i "s/ID=//" $sp_table
done

for species in {*; do mv $species $(echo $species | sed -e 's/^{//'); done    			#this gets rid of first {
for species in *}*; do mv $species $(echo $species | sed -e 's/}//'''); done			#this gets rid of second }



#JEFF's VERSION.... WORKS BETTER
#!/bin/bash
#Iterate through all Paramecium .gff's to create new table with just genes

parameciumgff=*.gff

for species in $parameciumgff
do
  	bn=`basename $species -full.gff`
        tableFile=$bn-gene.tab
        echo "$species -> $bn -> $tableFile"
        grep -P "\tgene\t" $species | cut -f 1,4,5,7,9 | cut -d ';' -f 1 > $tableFile
        sed -i 's/ID=//' $tableFile
#	cat $species | grep "   gene    " | cut -f 1,4,5,6,9 > {$species}_table
done






# Jeff has assembled tables of ortholog families using POFF software. These tables contain "# of species,# of genes, GeneID's" ... this was done for genes for which orthologs could be called.... pbi/ptet/psex clades
# Path to this table: 	#                               																											/N/dc2/projects/paramecium/BigProject/Ortho/PoFF
	#More genes == more GeneIDs (MAXIMUM OF 6 GENES... P_species_._____.P0restofID ... We want GeneID which includes species name and additional information
	#We need to extract gene ID ... column looks like this:  PBIA.V1_4.1.P01080057   PNOV.TE.1.P00010036     PPENT.87.1.P0730166     PPRIMP33049     PQUADEC.NiA.1.P00260133 PTRED.209.2.P71800001293280039
